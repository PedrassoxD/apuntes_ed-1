#Ciclo de vida del software
###1. Define "ciclo de vida del software"
Es el proceso para el desarrollo del software.
###2. Nombra las frases principales del desarrollo de software y explica brevemente que se hace en cada una de ellas.
**Fase de Definición – Especificación:**

Durante esta fase se identifican los requisitos del sistema y software. Se determina la información inicial del programa, el planteamiento del problema.

Se toman en cuenta los siguientes puntos:

-Información a procesar
-Función y rendimientos deseados
-Comportamiento del sistema
-Interfaces establecidas
-Restricciones de diseño

Tareas principales: Planificación del proyecto de Software, Ingeniería de sistemas de información y el análisis de los requisitos.

**Fase de desarrollo:**

En esta fase se define como diseñar las estructuras de datos, implementar funciones, caracterizar interfaces, traducir el diseño a programación, validar el producto (Pruebas de verificación).

El diseño del software es crear cualquier sistema nuevo o aplicaciones indispensables para cubrir las necesidades existentes.

Tareas principales: Diseño de Software, generación de código, pruebas de software.

**Fase de mantenimiento:**

La última etapa en el desarrollo del software, se centra en la retroalimentación, todos los cambios que se pueden necesitar en un producto.

Se aplica nuevamente la fase de definición y desarrollo sobre el software ya existente.

Pueden producirse diversos tipos de cambios, los más comunes son:

-Corrección: Corregir defectos.
-Adaptación: Modificación por cambios externos.
-Mejora: Ampliar los requisitos funcionales originales, a petición del cliente.
-Prevención: Cambio para facilitar el cambio.

###3. Explica brevemente en qué consiste el modelo en cascada cuando hablamos de desarrollo de software.
En Ingeniería de software el desarrollo en cascadaes el enfoque metodológico que ordena rigurosamente las etapas del proceso para el desarrollo de software, de tal forma que el inicio de cada etapa debe esperar a la finalización de la etapa anterior.1​ Al final de cada etapa, el modelo está diseñado para llevar a cabo una revisión final, que se encarga de determinar si el proyecto está listo para avanzar a la siguiente fase. Este modelo fue el primero en originarse y es la base de todos los demás modelos de ciclo de vida.
Un ejemplo de una metodología de desarrollo en cascada es:

 -Análisis de requisitos.
 -Diseño del sistema.
 -Diseño del programa.
 -Codificación.
 -Pruebas.
 -Implementación del programa.
 -Mantenimiento
 
###4. Ventajas e inconvenientes del desarrolo en cascada.
**Ventajas:**
-Realiza un buen funcionamiento en equipos débiles y productos maduros, por lo que se requiere menos capital y herramientas para hacerlo funcionar de forma óptima.
-Es un modelo fácil de implementar y entender.
-Está orientado a documentos.
-Es un modelo conocido y utilizado con frecuencia.
-Promueve una metodología de trabajo efectiva.

**Desventajas:**
En la vida real un proyecto rara vez sigue una secuencia lineal, esto crea una mala implementación del modelo, lo cual hace que lo lleve al fracaso.
-El proceso de creación tarda mucho tiempo puesto que debe pasar por periodo de pruebas y hasta que no esté finalizado no opera.
-Cualquier error detectado conduce al rediseño y nueva programación del código aceptado.
-Una etapa determinada del proyecto no se puede llevar a cabo a menos de que se haya culminado la etapa anterior.
###5. ¿Qué se entiende por verificación? ¿y por validación?
**Verificación:**

La verificación se enfoca más al proceso de evaluación del sistema o componentes ya que permite determinar si los productos de una determinada fase del desarrollo satisfacen las condiciones impuestas en el inicio de la etapa.

**¿Qué se debe tener en la verificación?**

   Consistencia: vigilar que la información sea coherente.
   Precisión: corrección de la sintaxis.
   Completitud: lagunas en capacidad deductiva.


**Lo que se hace en la verificación:**

   Identifica desviaciones con estándares y requerimientos.
   Recolecta datos para mejorar el proceso.
   Verifica que el producto:
    - Cumpla con los requerimientos.
    - Cumpla con los atributos de calidad.
    - Se ajuste a las regulaciones, estándares y procedimientos definidos.
    
   **Validación**

La validación también es una evaluación del sistema o de componentes, solo que es en el transcurso o al final del proceso del desarrollo, donde se determina si cumple con lo especificado.

Aspectos en la validación:

  -Construir el sistema correcto.
  -Evaluar la conformidad con la especificación de requisitos.

###6. Explica como funciona el modelo de desarrollo mediante la creación de prototipos
El Modelo de prototipos, en Ingeniería de software, pertenece a los modelos de desarrollo evolutivo. El prototipo debe ser construido en poco tiempo, usando los programas adecuados y no se debe utilizar muchos recursos.

El diseño rápido se centra en una representación de aquellos aspectos del software que serán visibles para el cliente o el usuario final. Este diseño conduce a la construcción de un prototipo, el cual es evaluado por el cliente para una retroalimentación; gracias a ésta se refinan los requisitos del software que se desarrollará. La interacción ocurre cuando el prototipo se ajusta para satisfacer las necesidades del cliente. Esto permite que al mismo tiempo el desarrollador entienda mejor lo que se debe hacer y el cliente vea resultados a corto plazo.

**Consta de varias etapas:**

   Comunicación
   Plan rápido.
   Modelado, diseño rápido
   Construcción del Prototipo
   Desarrollo, entrega y retroalimentación
   Entrega del desarrollo final
   
###7.  Explica como funciona el modelo espiral cuando se aplica al desarrollo orientado a objetos.
El desarrollo en espiral es un modelo de ciclo de vida del software definido por primera vez por Barry Boehm en 1986,1​ utilizado generalmente en la Ingeniería de software. Las actividades de este modelo se conforman en una espiral, en la que cada bucle o iteración representa un conjunto de actividades. Las actividades no están fijadas a ninguna prioridad, sino que las siguientes se eligen en función del análisis de riesgo, comenzando por el bucle interior. 

###8. ¿Qué cuatro principios rigen el desarrollo ágil expresados en el manifiesto Ágil?
-Valorar más a los individuos y sus interacciones que a los procesos y las herramientas.
-Valorar más el software funcionando que la documentación exhaustiva.
-Valorar más la colaboración con el cliente que la negociación contractual.
-Valorar más la respuesta ante el cambio que seguir un plan.

###9. ¿Qué es una historia de usuario?
Una historia de usuario es una representación de un requisito escrito en una o dos frases utilizando el lenguaje común del usuario. Las historias de usuario son utilizadas en las metodologías de desarrollo ágiles para la especificación de requisitos. Cada historia debe ser limitada, debería poderse escribir sobre una nota adhesiva pequeña.

###10. Haz un resumen sobre qué se entiende por Lean software y qué principios lo rigen.
Es una traducción de los principios y las prácticas de la forma de producir lean, hacia el área del desarrollo de software. Inicialmente, originado en el Sistema de Producción de Toyota y ahora, apoyado por una corriente que está surgiendo desde la comunidad Ágil. Este método ofrece todo un marco teórico sólido y basado en la experiencia, para las prácticas ágiles de gestión. Lo rigen los siguientes principios:

-Eliminar los desperdicios
-Amplificar el aprendizaje
-Decidir lo más tarde posible
-Entregar tan rápido como sea posible
-Capacitar al equipo
-Contruir integridad intrínseca
-Véase todo el conjunto

###11. Estudia las ventajas e inconvenientes de tener una pizarra web digital para la metodología kanban.
**Beneficios:**
-Estímulo del rendimiento. Análisis profundo y estimaciones 		 que permiten medir su rendimiento. Detección de cualquier 		 problema existente y ajuste del flujo de trabajo para ganar en 		 eficiencia.
-Organización y colaboración. La metodologia Kanban le permite beneficiarse del poder del enfoque visual, mediante el uso de columnas, carriles y tarjetas de colores. Usted será capaz de trabajar en el mismo tablero que su equipo y colaborar en tiempo real. Los tableros digitales Kanban le permitirán acceder a su flujo de trabajo desde cualquier sitio, compartir tareas con facilidad y comunicarse en su trabajo con sus colegas.
-Distribución del trabajo. Una cómoda visión general de los trabajos en curso y menos tiempo dedicado a la distribución y presentación de los trabajos. Las estimaciones son imperfectas, por consiguiente, un flujo constante de tareas reducirá su tiempo de espera y el tiempo dedicado a la asignación de tareas. 
**Desventajas:**
-Menor efectividad en situaciones de Recursos Compartidos: Las órdenes no frecuentes vuelven ineficientes a kanban ya que se tiene que asegurar una producción suficiente por parte de un proceso mientras que a su vez el proceso que es no-frecuente es ejecutado.
-Kanban asume sistemas de producción repetitivos dada la naturaleza de su creación en el área de manufactura.
-Posiblemente Kanban pueda arrojar productos de baja calidad que requieren de ser retrabajados. Kanban funciona a manera de semáforo para administrar el tráfico y así cumplir con las necesidades del cliente indicando cuando empezar, cuando bajar el ritmo y cuando parar. Cualquier variabilidad o evento no esperado puede afectar el funcionamiento del sistema provocando que se generen señales confusas.
-Calidad: El sistema Kanban lleva los niveles de inventario cerca de 0 lo que en caso de alta incertidumbre e interrupciones en la red de transporte representa un peligro ya que eso significa que los clientes se quedan sin suministro de partes.
	
###12, KANBAN. Haz un resumen de la metodología Kanban e indica sus diferencias frente a SCRUM.

KANBAN es un sistema de información que controla de modo armónico la fabricación de los productos necesarios en la cantidad y tiempo necesarios en cada uno de los procesos que tienen lugar tanto en el interior de la fábrica, como entre distintas empresas.

También se denomina “sistema de tarjetas”, pues en su implementación más sencilla utiliza tarjetas que se pegan en los contenedores de materiales y que se despegan cuando estos contenedores son utilizados, para asegurar la reposición de dichos materiales. Las tarjetas actúan de testigo del proceso de producción. Otras implementaciones más sofisticadas utilizan la misma filosofía, sustituyendo las tarjetas por otros métodos de visualización del flujo.

**Diferencias con SCRUM**

Scrum prescribe unos roles concretos. En Kanban se pueden definir roles o no.
Scrum prescribe equipos multifuncionales. En Kanban los equipos pueden ser multifuncionales o especializados.
Scrum prescribe reuniones concretas de tiempo fijo. En Kanban no existen reuniones prefijadas.
Scrum prescribe la estimación y la velocidad.
Scrum prescribe iteraciones de tiempo fijo (Sprint). Kanban no trabaja el concepto de iteración.
Scrum establece reuniones diarias centradas en las personas.
Scrum usa diagramas Burndown. Kanban no prescribe diagramas de seguimiento concretos.
En Scrum, el tablero pertenece a un único equipo. En Kanban, varios equipos o personas pueden compartir el mismo tablero.

###13, SCRUM. Explica como funciona Scrum.

Scrum es una forma de trabajo de la metodología Ágil mediante la cual a través de prácticas colaborativas se minimizan todo tipo de riesgos en la elaboración de un proyecto. Ésta tiene su origen en equipos de alta productividad.

En Scrum no se realiza una entrega final del proyecto sino que se van haciendo de forma regular entregas parciales, de forma que esto es lo que más beneficia al receptor del proyecto.  Por ello, Scrum está especialmente indicado para entornos complejos, donde los cambios se producen como mucha frecuencia y sobre la marcha y donde la rapidez, la flexibilidad, la adaptabilidad y la competencia juegan un papel fundamental.

Scrum se ejecuta en bloques temporales que son cortos y periódicos, denominados Sprints, que por lo general de entre 2 hasta 4 semanas, que es el plazo para feedback y reflexión.

Cada Sprint es una entidad en sí misma, esto es, proporciona un resultado completo, una variación del producto final que ha de poder ser entregado al cliente con el menor esfuerzo posible cuando éste lo solicite.

El proceso tiene como punto de partida una lista de objetivos/requisitos que conforman el plan de proyecto. Es el cliente del proyecto el que prioriza estos objetivos teniendo en cuenta un balance del valor y el coste de los mismos, es así como se determinan las iteraciones y consecuentes entregas.
###14, SCRUM. Define los siguientes términos:

**Product backlog:** El Product Backlog es una lista ordenada de todo lo que podría necesitarse en el producto y es la única fuente de requerimientos para los cambios que se realizarán en el producto.

**Sprint backlog:** Un Sprint Backlog es el listado de tareas en el que subdivide las historias de usuario que describen las funcionalidades que componen un proyecto. Este listado se define y estima en la reunión de Planificación del Sprint al inicio de la iteración. Las tareas deben ser pequeñas y poco acopladas para poder estimarlas.

###15, SCRUM. En la terminología Scrum qué terminos se utilizan como sinónimo de:

**Jefe de proyecto:** Scrum Master
**Cliente:**  Product Owner
**Equipo de desarrollo:** Team

###16, SCRUM. Haz un resumen de los requisitos para poder utilizar Scrum.

**-Cultura de empresa** basada en trabajo en equipo, delegación, creatividad y mejora continua.
**-Compromiso del cliente** en la dirección de los resultados del proyecto, gestión del ROI y disponibilidad para poder colaborar.
**-Compromiso de la Dirección** de la organización para resolver problemas endémicos y realizar cambios organizativos, formando equipos autogestionados y multidisciplinares y fomentando una cultura de gestión basada en la colaboración y en la facilitación llevada a cabo por líderes al servicio del equipo.
**-Compromiso conjunto y colaboración de los miembros del equipo.**
**-Relación entre proveedor y cliente** basada en ganar-ganar, colaboración y transparencia.
**-Facilidad para realizar cambios** en el proyecto.
**-Tamaño de cada equipo** entre 5 y 9 personas (con técnicas específicas de planificación y coordinación cuando varios equipos trabajan en el mismo proyecto).
**-Equipo trabajando en un mismo espacio común** para maximizar la comunicación.
**-Dedicación del equipo a tiempo completo.**
**-Estabilidad de los miembros del equipo**

###17, XP. Explica los 5 valores de la Programación Extrema.

**Simplicidad**

La simplicidad es la base de la programación extrema. Se simplifica el diseño para agilizar el desarrollo y facilitar el mantenimiento. Un diseño complejo del código junto a sucesivas modificaciones por parte de diferentes desarrolladores hacen que la complejidad aumente exponencialmente.

Para mantener la simplicidad es necesaria la refactorización del código, ésta es la manera de mantener el código simple a medida que crece.

También se aplica la simplicidad en la documentación, de esta manera el código debe comentarse en su justa medida, intentando eso sí que el código esté autodocumentado. Para ello se deben elegir adecuadamente los nombres de las variables, métodos y clases. Los nombres largos no decrementan la eficiencia del código ni el tiempo de desarrollo gracias a las herramientas de autocompletado y refactorización que existen actualmente.

Aplicando la simplicidad junto con la autoría colectiva del código y la programación por parejas se asegura que cuanto más grande se haga el proyecto, todo el equipo conocerá más y mejor el sistema completo.

**Comunicación**

La comunicación se realiza de diferentes formas. Para los programadores el código comunica mejor cuanto más simple sea. Si el código es complejo hay que esforzarse para hacerlo inteligible. El código autodocumentado es más fiable que los comentarios ya que éstos últimos pronto quedan desfasados con el código a medida que es modificado. Debe comentarse sólo aquello que no va a variar, por ejemplo el objetivo de una clase o la funcionalidad de un método.

Las pruebas unitarias son otra forma de comunicación ya que describen el diseño de las clases y los métodos al mostrar ejemplos concretos de como utilizar su funcionalidad. Los programadores se comunican constantemente gracias a la programación por parejas. La comunicación con el cliente es fluida ya que el cliente forma parte del equipo de desarrollo. El cliente decide qué características tienen prioridad y siempre debe estar disponible para solucionar dudas.

**Retroalimentación** (feedback)
Al estar el cliente integrado en el proyecto, su opinión sobre el estado del proyecto se conoce en tiempo real.

Al realizarse ciclos muy cortos tras los cuales se muestran resultados, se minimiza el tener que rehacer partes que no cumplen con los requisitos y ayuda a los programadores a centrarse en lo que es más importante.

Considérense los problemas que derivan de tener ciclos muy largos. Meses de trabajo pueden tirarse por la borda debido a cambios en los criterios del cliente o malentendidos por parte del equipo de desarrollo. El código también es una fuente de retroalimentación gracias a las herramientas de desarrollo. Por ejemplo, las pruebas unitarias informan sobre el estado de salud del código. Ejecutar las pruebas unitarias frecuentemente permite descubrir fallos debidos a cambios recientes en el código.

**Coraje o valentía**

Muchas de las prácticas implican valentía. Una de ellas es siempre diseñar y programar para hoy y no para mañana. Esto es un esfuerzo para evitar empantanarse en el diseño y requerir demasiado tiempo y trabajo para implementar el resto del proyecto. La valentía le permite a los desarrolladores que se sientan cómodos con reconstruir su código cuando sea necesario. Esto significa revisar el sistema existente y modificarlo si con ello los cambios futuros se implementarán más fácilmente. Otro ejemplo de valentía es saber cuando desechar un código: valentía para quitar código fuente obsoleto, sin importar cuanto esfuerzo y tiempo se invirtió en crear ese código. Además, valentía significa persistencia: un programador puede permanecer sin avanzar en un problema complejo por un día entero, y luego lo resolverá rápidamente al día siguiente, sólo si es persistente.

**Respeto**
El respeto se manifiesta de varias formas. Los miembros del equipo se respetan los unos a otros, porque los programadores no pueden realizar cambios que hacen que las pruebas existentes fallen o que demore el trabajo de sus compañeros. Los miembros respetan su trabajo porque siempre están luchando por la alta calidad en el producto y buscando el diseño óptimo o más eficiente para la solución a través de la refactorización del código. Los miembros del equipo respetan el trabajo del resto no haciendo menos a otros, una mejor autoestima en el equipo eleva su ritmo de producción.
###18, XP. ¿Cuáles son las características distintivas de XP frente a otras metodologías ágiles? Explícalas.

Las técnicas de XP han de permitir flexibilidad y cambios en los requisitos, además de fomentar la simplicidad, comunicación, trabajo en equipo, retroalimentación y respeto.

**TDD:** Desarrollo guiado por pruebas. Estas pruebas deben ser escritas antes del desarrollo para validar las funcionalidades.
**Pair Programming:** Técnica en la que dos programadores comparten ordenador para programar a la vez.
**Integración con cliente:** Una persona del cliente debe trabajar junto al equipo de desarrollo, así mejora la comunicación y el seguimiento de cambios solicitados por el cliente.
**Refactorización:** Repasar y sobrescribir ciertas partes del código para mantenerlo lo más limpio y legible.
**Propiedad compartida:** Promover que todos los miembros sean capaces de tocar cualquier parte del código.
**Simplicidad:** Cuanto más simple sea el sistema construido más sencillo será comprenderlo, modificarlo o añadir nuevas funcionalidades.



#####Bibliografía:
https://es.wikipedia.org/wiki/Proceso_para_el_desarrollo_de_software
https://okhosting.com/blog/desarrollo-de-software-fases-generales/
https://es.wikipedia.org/wiki/Desarrollo_en_cascada
http://ramon-gzz.blogspot.com/2012/08/verificacion-y-validacion-de-software.html
https://es.wikipedia.org/wiki/Modelo_de_prototipos
https://es.wikipedia.org/wiki/Desarrollo_en_espiral#Determinar_o_fijar_objetivos/
https://es.wikipedia.org/wiki/Manifiesto_%C3%A1gil#Principios_del_Manifiesto_%C3%81gil
https://es.wikipedia.org/wiki/Historias_de_usuario
https://es.wikipedia.org/wiki/Lean_software_development
https://kanbantool.com/es/metodologia-kanban
https://iswugaps2kanban.wordpress.com/ventajas-y-desventajas/
https://cristinaramosvega.com/semejanzas-diferencias-kanban-scrum/
https://es.wikipedia.org/wiki/Kanban
https://clouding.io/blog/scrum-en-la-metodologia-agil-te-explicamos-que-es-y-como-funciona/
http://www.ids.com.mx/desarrollo-profesional/comunidad-ids/blog/scrum-4ta-parte-artefactos
https://www.genbeta.com/desarrollo/cuando-todos-son-ventajas-sprint-backlog-hablando-de-scrum
http://www.javiergarzas.com/2014/03/quien-es-el-jefe-de-proyecto-en-un-proyecto-agil-scrum.html
https://www.softeng.es/es-es/empresa/metodologias-de-trabajo/metodologia-scrum/proceso-roles-de-scrum.html
https://proyectosagiles.org/requisitos-de-scrum/
https://es.wikipedia.org/wiki/Programaci%C3%B3n_extrema
https://www.quonext.com/blog/metodologias-agiles-scrum-kanban-xp/