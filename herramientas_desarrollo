#INTRODUCCIÓN HERRAMIENTAS DE DESARROLLO

###1. ¿Para qué sirve un compilador?¿Qué tipo de archivo obtenemos tras compilar?
Sirve para traducir un programa que ha sido escrito en un leguaje de programación a un lenguaje diferente, usualmente lenguaje de máquina, aunque también puede ser traducido a un código intermedio (bytecode) o a texto.
Obtenemos un archivo con extensión del lenguaje utilizado. Código máquina o bytecode.

###2. ¿Para qué sirve un enlazador?¿Qué tipo de archivo obtenemos tras enlazar?
Es un programa que toma los objetos generados en los primeros pasos del proceso de compilación, la información de todos los recursos necesarios (biblioteca), quita aquellos recursos que no necesita, y enlaza el código objeto con su(s) biblioteca(s) con lo que finalmente produce un fichero ejecutable o una biblioteca. En el caso de los programas enlazados dinámicamente, el enlace entre el programa ejecutable y las bibliotecas se realiza en tiempo de carga o ejecución del programa. 

Un programa para generar el ejecutable final.

###3. ¿Para qué sirve un intérprete?¿Obtenemos algún archivo tras interpretar?

Sirve para analizar y ejecutar programas. Los intérpretes se diferencian de los compiladores o de los ensambladores en que mientras estos traducen un programa desde su descripción en un lenguaje de programación al código de máquina del sistema, los intérpretes sólo realizan la traducción a medida que sea necesaria, típicamente, instrucción por instrucción, y normalmente no guardan el resultado de dicha traducción. 

###4. Explica cada uno de los siguientes conceptos e indica la relación entre ellos:

**➝Código Fuente:** El código fuente de un programa informático (o software) es un conjunto de líneas de texto con los pasos que debe seguir la computadora para ejecutar dicho programa.

El código fuente de un programa está escrito por un programador en algún lenguaje de programación, pero en este primer estado no es directamente ejecutable por la computadora, sino que debe ser traducido a otro lenguaje o código binario; así será más fácil para la máquina interpretarlo (lenguaje máquina o código objeto que sí pueda ser ejecutado por el hardware de la computadora). Para esta traducción se usan los llamados compiladores, ensambladores, intérpretes y otros sistemas de traducción. 

**➝Código Objeto:** se llama código objeto al código que resulta de la compilación del código fuente.1​ Puede ser en lenguaje máquina o bytecode, y puede distribuirse en varios archivos que corresponden a cada código fuente compilado. Luego un enlazador (linker) se encarga de juntar todos los archivos de código objeto para obtener el programa ejecutable. Código objeto: Conjunto de instrucciones y datos escritos en un lenguaje que entiende el ordenador directamente: binario o código máquina. Provienen de la traducción de cierto código fuente, es un fragmento del programa final y es específico de la plataforma de ejecución. 

**➝Código Binario:** El código binario es el sistema numérico usado para la representación de textos, o procesadores de instrucciones de computadora, utilizando el sistema binario (sistema numérico de dos dígitos, o bit: el "0" /cerrado/ y el "1" /abierto/). En informática y telecomunicaciones, el código binario se utiliza con variados métodos de codificación de datos, tales como cadenas de caracteres, o cadenas de bits. Estos métodos pueden ser de ancho fijo o ancho variable.

Los tres se tratan de distintos estados del código en el desarrollo del software.

###5. ¿Qué tipo de código es ByteCode generado por el compilador de java?

El bytecode Java es el tipo de instrucciones que la máquina virtual Java espera recibir, para posteriormente ser compiladas a lenguaje de máquina, mediante un compilador JIT a la hora de su ejecución. Usualmente es el resultado de utilizar un compilador del lenguaje de programación Java (como javac), pero puede ser generado desde otros compiladores. 

######Bibliografía
https://es.wikipedia.org/wiki/Compilador
https://es.wikipedia.org/wiki/Enlazador
https://es.wikipedia.org/wiki/Enlazado
https://es.wikipedia.org/wiki/C%C3%B3digo_fuente
https://es.wikipedia.org/wiki/C%C3%B3digo_objeto
https://es.wikipedia.org/wiki/C%C3%B3digo_binario
https://es.wikipedia.org/wiki/Bytecode_Java


### 2. Para cada uno de los lenguajes anteriores, indica el proceso realizado para conseguir ejecutar el código: ¿compilación o interpretación?

**Bash:** Interpretación
**Python:** Interpretación
**Php:** Interpretación
**Javascript:** Interpretación
**C:** Compilación
**C++:** Compilación
**Java:** Compilación
**Ruby:** Interpretación
**Go:** Compilación e Interpretación
**Rust:** Interpretación
**Lisp:** Interpretación
**Ensablador:** Interpretación

###3. Para cada uno de los lenguajes anteriores, indica el nombre del compilador o interprete utilizado en GNU/Linux.

**Bash:** Bash
**Python:** Python
**Php:** Php
**Javascript:** Node
**C:** Gcc
**C++:** G++
**Java:** Javac
**Ruby:** Ruby
**Go:** Golang
**Rust:** Rustc
**Lisp:** Clisp
**Ensablador:** Nasm

###4. Investiga y averigua que extensión tienen los archivos de código fuente de los siguientes lenguajes:

**Bash:** .sh
**Python:** .py
**Php:** .php
**Javascript:** .js
**C:** .c
**C++:** .cpp
**Java:** .java
**Ruby:** .rb
**Go:** .go
**Rust:** .rs
**Lisp:** .lisp
**Ensablador:** .asm

###5. Scripts ejecutables para los lenguajes interpretados. Edita los scripts para los siguientes lenguajes:

**Bash:** echo "Hola mundo"
**Python:** print "Hola mundo"
**Php:** 
<?php 
  echo "Hola mundo\n" 
?>
**Javascript:** console.log('Hola mundo');
**C:** 
 #include <stdio.h>

int main()
{
    printf("¡Hola, mundo!");
    return 0;
}
**C++:** 
 class Hola
{
    public static void main(String[] args)
    {
        System.out.println("Hola Mundo");
    }
}
**Java:** 
class Hola
{
    public static void main(String[] args)
    {
        System.out.println("Hola Mundo");
    }
}
**Ruby:** puts "Hola Mundo"
**Go:** 
package main

import "fmt"

func main() {
        fmt.Println("Hola mundo desde Go")
}
**Rust:** 
fn main() {
    println!("¡Hola, mundo! Desde RUST ");
}
**Lisp:** (format t "¡Hola, mundo!")
**Ensablador:** 
 section .data
 
 msg     db "¡Hola Mundo!", 0Ah
 len     equ     $ - msg  
 
 section .text
 
 global _start
 
 _start:
        mov     eax, 04h
        mov     ebx, 01h
        mov     ecx, msg
        mov     edx, len
        int     80h
        mov     eax, 01h
        mov     ebx, 00h
        int     80h

###6. ¿Qué extensión tienen los archivos de código objeto?
Cada lenguaje tiene una extensión diferente.

###7. Lenguaje C. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:
Encontrarás los archivos en el siguiente enlace:
https://github.com/raul955/apuntes_ed/tree/master/entornos%20.o

###8. Lenguaje C. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:
Encontrarás el archivo en el siguiente enlace:
https://github.com/raul955/apuntes_ed/tree/master/entornos%20.o

###9. Lenguaje C++. Código en varios archivos. Obtener el código objeto a partir del código fuente de los 3 archivos siguientes:
Encontrarás los archivos en el siguiente enlace:
https://github.com/raul955/apuntes_ed/tree/master/entornos%20.o

###10. Lenguaje C++. Código en varios archivos. Obtener el código binario ejecutable a partir del código objeto de los 3 archivos anteriores:
Encontrarás los archivos en el siguiente enlace:
https://github.com/raul955/apuntes_ed/tree/master/entornos%20.o

###11. Bibliotecas. Define que se entiende por biblioteca o librería y los tipos que existen.

Es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programación, que ofrece una interfaz bien definida para la funcionalidad que se invoca. 

**Bibliotecas estáticas** es un fichero contenedor con varios archivos de código objeto empaquetados, que en el proceso de enlazado durante la compilación serán copiados y relocalizados (si es necesario) en el fichero ejecutable final, junto con el resto de ficheros de código objeto.
**Bibliotecas dinámicas** son ficheros que contienen código objeto construido de forma independiente de su ubicación3​ de tal modo que están preparadas para poder ser requeridas y cargadas en tiempo de ejecución por cualquier programa, en lugar de tener que ser enlazadas, previamente, en tiempo de compilación. Por tanto, han de estar disponibles como ficheros independientes al programa ejecutable.

https://es.wikipedia.org/wiki/Biblioteca_(inform%C3%A1tica)#Tipos

###12. Bibliotecas. ¿Qué tipo es el más utilizado actualmente? ¿Por qué?
Depende, cada una tiene sus ventajas y desventajas.
Para programas no muy grandes y por simplicidad, se suelen usar librerías estáticas. Las dinámicas están bien para programas enormes o para librerías del sistema, que como están en todos los ordenadores con linux, no es necesario andar llevándoselas de un lado a otro. 

http://www.chuidiang.org/clinux/herramientas/librerias.php

###13. Bibliotecas. Crea una librería dinámica en C que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.

###14. Bibliotecas. Crea una librería dinámica en Java que proporcione las funciones para sumar, restar, multiplicar y dividir 2 números enteros. Crea un programa que haga uso de ella y comprueba que se ejecuta correctamente.

###15. Bibliotecas. Busca información y explica las ventajas y desventajas de usar librerías estáticas.


-Un programa compilado con librerías estáticas es más grande, ya que se hace copia de todo lo que necesita.
 -Un programa compilado con librerías estáticas se puede llevar a otro ordenador sin necesidad de llevarse las librerías.
 -Un programa compilado con librerías estáticas es, en principio, más rápido en ejecución. Cuando llama a una función de la librería, la tiene en su código y no tiene que ir a leer el fichero de la librería dinámica para encontrar la función y ejecutarla.
-Si cambiamos una librería estática, a los ejecutables no les afecta. Si cambiamos una dinámica, los ejecutables se ven afectados. Esto es una ventaja si hemos cambiado la librería para corregir un error (se corrige automáticamente en todos los ejecutables), pero es un inconveniente si tocar eso nos hace cambiar los ejecutables (por ejemplo, hemos añadido un parámetro más a una función de la librería, los ejecutables ya hechos dejan de funcionar).


###16. Bibliotecas. Busca información y explica las ventajas y desventajas de usar librerías dinámicas.

No se copia en nuestro programa al compilarlo. Cuando tengamos nuestro ejecutable y lo estemos ejecutando, cada vez que el código necesite algo de la librería, irá a buscarlo a ésta. Si borramos la librería, nuestro programa dará un error de que no la encuentra. 

Están bien para programas enormes o para librerías del sistema, que como están en todos los ordenadores con linux, no es necesario andar llevándoselas de un lado a otro. 

###17. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo ejecutable para código fuente en C con make. Haz uso de un buildfile.

###18. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Ant. Haz uso de un buildfile.

###19. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Maven. Haz uso de un buildfile.

###20. Build. Automatiza el proceso de compilación de ejecutable y biblioteca, su enlazado y la generación del archivo .jar para código fuente en Java con Gradle. Haz uso de un buildfile.

###21. CMake. Automatiza el proceso de compilación de ejecutable y bibliotecas, su enlazado y la generación del archivo ejecutable para código fuente en C++. Crea un buildfile con CMake.


###Bibliografía.